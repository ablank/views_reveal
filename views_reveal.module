<?php
/**
 * @file
 * Integrates Views with Reveal.js.
 */

/**
 * Implements hook_views_api().
 */
function views_reveal_views_api() {
  $inc = drupal_get_path('module', 'views_reveal') . '/inc';

  return array(
    'api' => 3.0,
    'path' => $inc,
    'template path' => $inc,
  );
}

/**
 * Implements hook_libraries_info().
 */
function views_reveal_libraries_info() {

  $libraries['reveal'] = array(
    'name' => 'RevealJS',
    'vendor url' => 'http://lab.hakim.se/reveal-js/',
    'download url' => 'https://github.com/hakimel/reveal.js',
    'version callback' => 'views_reveal_version',
    'files' => array(
      'js' => array(
        'lib/js/head.min.js',
        'js/reveal.min.js',
      ),
      'css' => array(
        'css/reveal.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Versioning info for library.
 *
 * @return string
 *   Reveal.js version.
 */
function views_reveal_version() {

  return '2.6.2';
}

/**
 * Implements hook_theme().
 */
function views_reveal_theme($existing, $type, $theme, $path) {
  $themes['views_reveal'] = array(
    'base hook' => 'page',
    'render element' => 'page',
    'template' => 'inc/page--reveal',
    'override preprocess functions' => TRUE,
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_page',
      'template_preprocess_views_view_reveal',
    ),
  );

  return $themes;
}

/**
 * Implements hook_theme_preprocess_page().
 */
function views_reveal_preprocess_page(&$vars) {
  $view = views_get_page_view();
  if (!empty($view)) {
    if ($view->style_plugin->plugin_name === 'reveal') {
      $vars['theme_hook_suggestions'][] = 'views_reveal';
    }
  }
}

/**
 * Template function for views_reveal style plugin.
 *
 * @param array $vars
 *   Array of template variables.
 */
function template_preprocess_views_view_reveal(&$vars) {
  $view = $vars['view'];

  $vars['classes_array'][] = 'reveal';

// Script/styles break Views UI- don't add to admin pages.
  path_is_admin(current_path()) ? NULL : views_reveal_assets($view);
}

/**
 * Add assets to view for front-end display.
 *
 * @param object $view
 *   The active View object.
 */
function views_reveal_assets(&$view) {
  $mod = drupal_get_path('module', 'views_reveal');
  $lib = libraries_get_path('reveal');
  $settings = views_reveal_get_settings($view->style_plugin->options);
// Add library path to settings for async loading from front-end.
  $settings['lib'] = $GLOBALS['base_path'] . $lib;

// Load library js & css.
  libraries_load('reveal');
// Add module js settings.
  drupal_add_js(array('views_reveal' => views_reveal_json_encode($settings)), array(
    'type' => 'setting',
  ));
// Add module js.
  drupal_add_js($mod . '/inc/views_reveal.min.js', array(
    'type' => 'file',
    'scope' => JS_DEFAULT,
    'weight' => 1,
  ));
// Add presentation theme stylesheet based on settings.
  if (!empty($settings['theme'])) {
    drupal_add_css($lib . '/css/theme/' . $settings['theme'] . '.css', array(
      'type' => 'file',
      'scope' => CSS_DEFAULT,
      'weight' => 0,
    ));
  }
}

/**
 * Implements hook_css_alter().
 */
function views_reveal_css_alter(&$vars) {
// Override draggableViews list stylesheet for better UI.
  if (module_exists('draggableviews') && user_access('access draggableviews')) {
    $dv = drupal_get_path('module', 'draggableviews') . '/css/draggableviews_list.css';
    if (isset($vars[$dv])) {
      $vars[$dv]['data'] = drupal_get_path('module', 'views_reveal') . '/admin/draggableviews_list_reveal.css';
    }
  }
}

/**
 * Configure plugin settings for js and flatten array.
 *
 * @param array $array
 *   Array of settings from views_style_plugin.
 *
 * @return array
 *   Merged & formatted settings.
 */
function views_reveal_get_settings($array) {
  $options = array();
  foreach ($array as $key => $val) {
    if (!is_array($val)) {
      if ($val === "0" || $val === "1") {
        $options[$key] = !!$val;
      }
      else {
        $options[$key] = $val;
      }
    }
    else {
      $options = array_merge($options, views_reveal_get_settings($val));
    }
  }

  return $options;
}

/**
 * Format json.
 *
 * @param array $settings
 *   Array of php settings.
 *
 * @return string
 *   JSON settings.
 */
function views_reveal_json_encode($settings) {

  $json = json_encode($settings, JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK);

  return $json;
}

/**
 * Implements hook_help().
 */
function views_reveal_help($path, $arg) {
  $output = '';
  switch ($path) {

    case 'admin/help#views_reveal':
      $output .= '<p>' . t('The Views Reveal module provides the ability to create Reveal.js presentations using content from Views.') . '</p>';
      $output .= '<h2>' . t('Views integration') . '</h2>';
      $output .= '<p>';
      if (module_exists('views_ui')) {
        $output .= t('Clone or modify the <a href="!views_reveal">Reveal Presentation Starter</a> for a quick start, or <a href="!views-url">create a new view page</a> with the "Reveal Presentation" display format.', array('!views_reveal' => url('/admin/structure/views/view/reveal_presentation/edit'), '!views-url' => url('admin/structure/views')));
      }
      else {
        $output .= t('Views UI is not enabled, and is needed to modify the Presentation Settings. You may need to <a href="@views">install the Views module</a> or <a href="!modules-url">enable the Views UI module</a>.', array('!modules-url' => url('admin/modules'), '@views' => 'http://drupal.org/project/views'));
      }
      $output .= '</p>';
      $output .= '<p>';
      $output .= t('Configuration options for Views Reveal are accessible through Views Format Settings.');
      $output .= '</p>';
      $output .= '<img alt="Views Format Settings" src="' . file_create_url(drupal_get_path('module', 'views_reveal') . '/admin/help_format.jpg') . '" width=440 height=380 />';
      $output .= '<img alt="Views Reveal Settings" src="' . file_create_url(drupal_get_path('module', 'views_reveal') . '/admin/help_format_settings.jpg') . '" width=440 height=380 />';

      return $output;
  }
}
